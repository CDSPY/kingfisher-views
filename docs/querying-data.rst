Querying data in Kingfisher Views
=================================

Summary tables in Kingfisher Views are generated from data in `Kingfisher Process <https://kingfisher-process.readthedocs.io/en/latest/>`__, which is organized by collection. Each collection contains either data downloaded from an OCDS publisher using a `Kingfisher Scrape <https://kingfisher-scrape.readthedocs.io/en/latest/>`__ spider, or loaded locally.

A Kingfisher Views schema can contain summaries of one or more collections.

OCDS data can be published using either `releases or records <https://standard.open-contracting.org/latest/en/getting_started/releases_and_records/>`__. Releases are point in time updates about a contracting process and a record provides an index of all the releases for a contracting process.

Kingfisher Process automatically transforms OCDS releases to create compiled release collections,  containing a single compiled release per contracting process populated with the latest value of each field.

Tables in Kingfisher Views can contain summaries of:

* individual releases
* compiled releases generated by Kingfisher Process
* compiled releases published as part of an OCDS record

Since most analysis is much easier to perform on compiled releases, we recommend working with compiled releases to begin with.

List all schemas in the database
--------------------------------

Kingfisher Views creates database schemes to store summary data.

The following query returns a list of schemas in the database:

.. code-block:: sql

  select
    schema_name
  from
    information_schema.schemata;

Kingfisher Views schemas are named ``view_data_*``, if you don't see any such schemas refer to :doc:`cli/index` and use the ``add-view`` command to generate a schema.

Set the schema to query
-----------------------

The following command sets the current schema to ``view_data_collection_1070_1071_1072`` by making it the first item in the search path:

.. code-block:: sql

  set
    search_path
  to
    view_data_collection_1070_1071_1072, public;

.. note::

  Depending on the tool used to query the database, you may need to include the above command at the start of each query you run.

List the collections in the current schema
------------------------------------------

The following query lists the collections in the current schema, with the name of the data source and the type of data summarised:

.. code-block:: sql

  select distinct
      collection_id,
      source_id,
      release_type
  from
      release_summary
  join
      collection
  on
      release_summary.collection_id = collection.id
  order by
      collection_id desc;

The ``release_type`` column indicates the type of data stored in the collection:

* ``release`` identifies individual releases
* ``compiled_release`` identifies compiled releases generated by Kingfisher Process
* ``record`` identifies compiled releases published as part of an OCDS record

Get a top-level summary of contracting processes
------------------------------------------------

The ``release_summary`` table contains data summarised at the top level of an OCDS release.

Use one of the ``collection_id`` returned by the previous query to filter your results to a single collection. To get a summary of a whole contracting process rather choose a ``compiled_release`` or ``record`` collection.

The following query returns a top-level summary of the first 3 contracting processes in collection ``1060``.

.. code-block:: sql

  select
      *
  from
      release_summary
  where
      collection_id = 1060
  limit 3;

To learn more about the summaries and aggregates in the ``release_summary`` table, refer to the :doc:`database`.

To get data from a different collection, change the ``collection_id`` parameter.

Calculate the total value of tenders in a collection
----------------------------------------------------

Summary data on tenders is stored in the ``tender_summary`` table.

The following query calculates the total value of tenders diaggregated by currency and tender status in collection ``1060``.

.. code-block:: sql

  select
    tender_value_currency, --return the currency of the tender value, values in OCDS have an amount and a currency, as datasets may contain values in multiple currencies
    tender_status,
    sum(tender_value_amount)
  from
    tender_summary
  where
    collection_id = 1060
  group by
    tender_value_currency,
    tender_status
  order by
    tender_value_currency,
    tender_status;

To learn more about the summaries and aggregates in the ``tender_summary`` table, refer to the :doc:`database`.

.. tip::

  The ``tender``, ``award`` and ``contract`` objects in OCDS all have a ``.status`` property.

  Kingfisher Views exposes these status properties in ``tender_summary.tender_status``, ``awards_summary.award_status`` and ``contracts_summary.contract_status``.

  Consider which statuses you want to include or exclude from your analysis, for example you might wish to exclude pending and cancelled contracts when calculating the total value of contracts for each buyer.

  The `OCDS codelist documentation <https://standard.open-contracting.org/latest/en/schema/codelists/#>`__ describes the meaning of the statuses for each object.

Calculate the top 10 buyers by award value
------------------------------------------

Summary data on buyers is stored in the ``buyer_summary`` table and summary data on awards is stored in the ``award_summary`` table.

To join summary tables, use the ``id`` column, which uniquely identifies a release. To learn more about the relationships between tables refer to the :doc:`database`.

The ``buyer_summary`` table doesn't include the buyer's name, however the ``buyer`` column contains a jsonb blob of the buyer  for each contracting process, which this can be extracted from.

Most summary tables in Kingfisher Views include a column containing jsonb blobs of the object the summary relates to.

The following query calculates the top 10 buyers by award value for collection ``1060``, disaggregated by currency and counting 'active' awards only:

.. code-block:: sql

  select
      buyer_identifier,
      buyer -> 'name' as buyer_name, --extract the buyer name from the JSON
      award_value_currency,
      sum(award_value_amount) as award_amount
  from
      awards_summary
  join
      buyer_summary on awards_summary.id = buyer_summary.id
  where
      awards_summary.collection_id = 1060
  and
      awards_summary.award_value_amount > 0 --filter out awards with no value
  and
      awards_summary.award_status = 'active'
  group by
      buyer_identifier,
      buyer_name,
      award_value_currency
  order by
      award_amount desc
  limit
      10;

Querying other collections and fields
-------------------------------------

Coverage of the OCDS schema varies by publisher.

To identify the fields needed for your analysis and how to answer them, use the `OCDS schema documentation <https://standard.open-contracting.org/latest/en/schema/release/>`__ to understand the meaning, structure and format of the fields in OCDS.

To check whether the fields needed for your analysis are available for a particular collection, use the ``field_counts`` table.

The following query lists the coverage of each field in collection ``1060``:

.. code-block:: sql

  select
    *
  from
    field_counts
  where
    collection_id = 1060

You can also check the coverage of specific fields or groups of fields by filtering on the ``path`` column:

.. code-block:: sql

  select
    *
  from
    field_counts
  where
    collection_id = 1060
  and
    path in ('tender/value/amount', 'tender/procurementMethod')
